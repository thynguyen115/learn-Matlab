## Basic syntax:
>> x = 5 >>> size(x) gives 1 1 // meaning: x = 5 is a 1x1 matrix
>> v = [1, 2, 3]; >>> size(v) gives 1 3; >>> v gives 1 2 3. Note: use ; to suppress the output
>> v = v' // transpose the matrix
>> w = 1:10 // gives a vector [1 2 3 ... 10]
>> A = [1 2; 3 4] // 2x2 matrix [1 2] on the 1st row, then [3 4]
>> A(1,2) // gives 2, b/c 2 is on the 1st row, second col
>> A(:, :) // gives whold matrix
>> A(1, :) // row 1, every col ==> everything on row 1
>> A(:, 1) // everything on col 1
>> A(1:2, 1:2) // everything [from the first row to the second row] and [from the first col to the 2nd col]

## Create some special matrices faster
>> eye(3) // gives an identity matrix of size 3x3
>> zeros(3) // gives a 3x3 zero matrix
>> ones(1,2) // gives a 1x2 one matrix

## Matrix arithmetic:
- Components wise:
  >> A + B; >> A - B;
  >> A.*B; >> A./B;
  >> sin(A) // find sine of each element inside matrix A (note: sine will treat each number as RADIAN, not degree)
- Matrix multiplication >> A*B;
- Matrix division: >> A/B // means A/B = A*(B)^-1

## Dot products: xy
 >> x*y' // meaning: x times y transposed ==> get a scalar
 Alternatively, >> dot(x,y) // gives same result

## Cross product: vectA x vectB = |A||B|sin(A,B), determine the direction of the result by right hand rule
>> cross(x,y)

## Complex numbers:
>> sqrt(-1) gives 0.0000 + 1.0000i
>> i also gives 0.0000 + 1.0000i
>> i^2 gives -1

## Built-in Functions:
- sin(num), cos(num), tan(0)
- exp(n) is for e^n; for example, e:= exp(1); e^2 = exp(2)
- log(n) is for ln(n); for example: ln(e) := log(exp(1)) // means ln(e^1) = 1
- log10(n) is for log base 10 ==> >> log10(10) // gives 1

## User-defined functions:


